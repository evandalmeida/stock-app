{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst locations = [{\n  name: 'United States',\n  lat: 37.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -25.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 56.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  const markets = [{\n    name: 'United States',\n    index: 'S&P 500'\n  }, {\n    name: 'Europe',\n    index: 'Euro Stoxx 50'\n  }, {\n    name: 'Asia',\n    index: 'Nikkei 225'\n  }, {\n    name: 'Australia',\n    index: 'S&P/ASX 200'\n  }, {\n    name: 'Canada',\n    index: 'S&P/TSX Composite'\n  }];\n  useEffect(() => {\n    const calculateMarketStatus = () => {\n      markets.forEach(market => {\n        fetch(`/api/search-stock?query=${market.index}`).then(response => {\n          if (!response.ok) {\n            throw new Error(`Network response was not ok: ${response.status}`);\n          }\n          return response.json();\n        }).then(indexData => {\n          // Assuming the backend returns index data with a \"performance\" field\n          const performance = indexData.performance;\n\n          // Determine if the market is up or down (you can define your criteria here)\n          const isMarketUp = performance > 0;\n\n          // Update the market status for the location\n          setMarketStatus(prevStatus => ({\n            ...prevStatus,\n            [market.name]: isMarketUp\n          }));\n        }).catch(error => {\n          console.error(`Error fetching index data for ${market.name}:`, error);\n        });\n      });\n    };\n\n    // Fetch initial data when the component mounts\n    calculateMarketStatus();\n\n    // Set up an interval to periodically recalculate market status\n    const interval = setInterval(() => {\n      calculateMarketStatus();\n    }, 60000); // Update every 1 minute (adjust as needed)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Market Watch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(marketStatus).map(([location, isUp]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [location, \":\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `market-icon ${isUp ? 'green' : 'red'}`,\n          children: isUp ? 'Market Up' : 'Market Down'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, location, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .market-icon {\n            display: inline-block;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            margin-left: 8px;\n          }\n\n          .green {\n            background-color: green;\n          }\n\n          .red {\n            background-color: red;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: locations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          title: location.name,\n          icon: {\n            // Set the marker icon based on market status\n            url: marketStatus[location.name] ? '/public/green.png' // Green marker icon path\n            : '/public/red.jpeg',\n            // Red marker icon path\n            scaledSize: {\n              width: 32,\n              height: 32\n            } // Adjust width and height as needed\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(MarketWatch, \"p5pObv9aQAj7A/Uw3+JbGFREf6Q=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","borderRadius","center","lat","lng","locations","name","MarketWatch","_s","apiKey","setApiKey","error","setError","marketStatus","setMarketStatus","markets","index","calculateMarketStatus","forEach","market","fetch","then","response","ok","Error","status","json","indexData","performance","isMarketUp","prevStatus","catch","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","location","isUp","className","googleMapsApiKey","mapContainerStyle","zoom","position","title","icon","url","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px',\n};\n\nconst center = {\n  lat: 32,\n  lng: 20,\n};\n\nconst locations = [\n  { name: 'United States', lat: 37.0902, lng: -95.7129 },\n  { name: 'Europe', lat: 54.5260, lng: 15.2551 },\n  { name: 'Asia', lat: 34.0479, lng: 100.6197 },\n  { name: 'Australia', lat: -25.2744, lng: 133.7751 },\n  { name: 'Canada', lat: 56.1304, lng: -106.3468 },\n];\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  const markets = [\n    { name: 'United States', index: 'S&P 500' },\n    { name: 'Europe', index: 'Euro Stoxx 50' },\n    { name: 'Asia', index: 'Nikkei 225' },\n    { name: 'Australia', index: 'S&P/ASX 200' },\n    { name: 'Canada', index: 'S&P/TSX Composite' },\n  ];\n\n  useEffect(() => {\n    const calculateMarketStatus = () => {\n      markets.forEach((market) => {\n        fetch(`/api/search-stock?query=${market.index}`)\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`Network response was not ok: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then((indexData) => {\n            // Assuming the backend returns index data with a \"performance\" field\n            const performance = indexData.performance;\n\n            // Determine if the market is up or down (you can define your criteria here)\n            const isMarketUp = performance > 0;\n\n            // Update the market status for the location\n            setMarketStatus((prevStatus) => ({\n              ...prevStatus,\n              [market.name]: isMarketUp,\n            }));\n          })\n          .catch((error) => {\n            console.error(`Error fetching index data for ${market.name}:`, error);\n          });\n      });\n    };\n\n    // Fetch initial data when the component mounts\n    calculateMarketStatus();\n\n    // Set up an interval to periodically recalculate market status\n    const interval = setInterval(() => {\n      calculateMarketStatus();\n    }, 60000); // Update every 1 minute (adjust as needed)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <h1>Market Watch</h1>\n      <ul>\n        {Object.entries(marketStatus).map(([location, isUp]) => (\n          <li key={location}>\n            {location}:\n            <span className={`market-icon ${isUp ? 'green' : 'red'}`}>\n              {isUp ? 'Market Up' : 'Market Down'}\n            </span>\n          </li>\n        ))}\n      </ul>\n      <style>\n        {`\n          .market-icon {\n            display: inline-block;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            margin-left: 8px;\n          }\n\n          .green {\n            background-color: green;\n          }\n\n          .red {\n            background-color: red;\n          }\n        `}\n      </style>\n      {apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            {locations.map((location, index) => (\n              <Marker\n                key={index}\n                position={location}\n                title={location.name}\n                icon={{\n                  // Set the marker icon based on market status\n                  url: marketStatus[location.name]\n                    ? '/public/green.png' // Green marker icon path\n                    : '/public/red.jpeg', // Red marker icon path\n                  scaledSize: { width: 32, height: 32 }, // Adjust width and height as needed\n                }}\n              />\n            ))}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}