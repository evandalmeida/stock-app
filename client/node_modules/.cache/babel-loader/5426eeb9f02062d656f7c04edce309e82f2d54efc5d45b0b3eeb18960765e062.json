{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst locations = [{\n  name: 'United States',\n  lat: 37.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -25.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 56.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  useEffect(() => {\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error(\"Error fetching Google Maps API key:\", error);\n      setError('Error loading Google Maps!');\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch stock data and determine market status for each location\n    locations.forEach(location => {\n      fetch(`/api/search-stock?query=${location.name}`).then(response => response.json()).then(stockData => {\n        // Determine market status based on your criteria (e.g., comparing stock price)\n        const isMarketUp = stockData && stockData.price > 0; // Example condition\n        setMarketStatus(prevStatus => ({\n          ...prevStatus,\n          [location.name]: isMarketUp\n        }));\n      }).catch(error => {\n        console.error(`Error fetching stock data for ${location.name}:`, error);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"market-watch\",\n    children: [\" \", error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) // Display error message if there is an error\n    : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: locations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          title: location.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(MarketWatch, \"MmaBAe2PujbEzXIMzBgpnIEXGaQ=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","containerStyle","width","height","borderRadius","center","lat","lng","locations","name","MarketWatch","_s","apiKey","setApiKey","error","setError","marketStatus","setMarketStatus","fetch","then","response","json","data","catch","console","forEach","location","stockData","isMarketUp","price","prevStatus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","map","index","position","title","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\nconst locations = [\n  { name: 'United States', lat: 37.0902, lng: -95.7129 },\n  { name: 'Europe', lat: 54.5260, lng: 15.2551 },\n  { name: 'Asia', lat: 34.0479, lng: 100.6197 },\n  { name: 'Australia', lat: -25.2744, lng: 133.7751 },\n  { name: 'Canada', lat: 56.1304, lng: -106.3468 }\n];\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  useEffect(() => {\n    fetch('/api/maps/config')\n      .then(response => response.json())\n      .then(data => setApiKey(data.apiKey))\n      .catch(error => {\n        console.error(\"Error fetching Google Maps API key:\", error);\n        setError('Error loading Google Maps!');\n      });\n  }, []);\n\n  useEffect(() => {\n    // Fetch stock data and determine market status for each location\n    locations.forEach(location => {\n      fetch(`/api/search-stock?query=${location.name}`)\n        .then(response => response.json())\n        .then(stockData => {\n          // Determine market status based on your criteria (e.g., comparing stock price)\n          const isMarketUp = stockData && stockData.price > 0; // Example condition\n          setMarketStatus(prevStatus => ({\n            ...prevStatus,\n            [location.name]: isMarketUp\n          }));\n        })\n        .catch(error => {\n          console.error(`Error fetching stock data for ${location.name}:`, error);\n        });\n    });\n  }, []);\n\n  return (\n    <div className=\"market-watch\"> {/* Apply the \"market-watch\" class here */}\n      {error ? (\n        <p>{error}</p> // Display error message if there is an error\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            {locations.map((location, index) => (\n              <Marker key={index} position={location} title={location.name} />\n            ))}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </div>\n  );\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}