{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: '^GSPC' // Replace with the Yahoo Finance symbol for S&P 500\n  },\n\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: '^STOXX50E' // Replace with the Yahoo Finance symbol for Euro Stoxx 50\n  },\n\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: '^N225' // Replace with the Yahoo Finance symbol for Nikkei 225\n  },\n\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: '^AXJO' // Replace with the Yahoo Finance symbol for S&P/ASX 200\n  },\n\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: '^GSPTSE' // Replace with the Yahoo Finance symbol for S&P/TSX Composite\n  }\n};\n\nconst locations = [{\n  name: 'United States',\n  lat: 30.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -30.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 50.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [indexFundData, setIndexFundData] = useState({});\n  const [locationData, setLocationData] = useState(locations);\n  useEffect(() => {\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error('Error fetching Google Maps API key:', error);\n      setError('Error loading Google Maps!');\n    });\n\n    // Fetch index fund data using Yahoo Finance API\n    const fetchIndexFundData = async () => {\n      const symbols = Object.values(indexFunds).map(fund => fund.ticker).join(',');\n      const url = `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${symbols}`;\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Fetch the old price from /api/stocklist or your existing endpoint\n        const oldPriceData = await fetch('/api/stocklist'); // Replace with your actual endpoint\n        if (!oldPriceData.ok) {\n          throw new Error(`Network response for old prices was not ok: ${oldPriceData.status}`);\n        }\n        const oldPrice = await oldPriceData.json();\n\n        // Update marker data based on index fund data and old price\n        updateMarkers(data, oldPrice);\n      } catch (error) {\n        console.error('Error fetching index fund data:', error);\n        setError('Error loading index fund data!');\n      }\n    };\n    fetchIndexFundData();\n  }, []);\n  const updateMarkers = (indexFundData, oldPrice) => {\n    if (indexFundData) {\n      const updatedLocations = locationData.map(location => {\n        const indexFund = indexFunds[location.name];\n        if (indexFund) {\n          const fundData = indexFundData.quoteResponse.find(quote => quote.symbol === indexFund.ticker);\n          if (fundData) {\n            const currentPrice = fundData.regularMarketPrice;\n            // Use the fetched old price\n            const isPriceIncreased = currentPrice > oldPrice[indexFund.ticker];\n            return {\n              ...location,\n              isPriceIncreased\n            };\n          }\n        }\n        return location;\n      });\n      setLocationData(updatedLocations);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this) : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: locationData.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          title: location.name,\n          icon: {\n            url: location.isPriceIncreased ? 'https://www.freeiconspng.com/uploads/green-spot-light-png-11.png' : 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png',\n            scaledSize: {\n              width: 100,\n              height: 100\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"lUJHT8oK5I62ZKl5lstz6UvCkxE=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","borderRadius","center","lat","lng","indexFunds","name","ticker","locations","MarketWatch","_s","apiKey","setApiKey","error","setError","indexFundData","setIndexFundData","locationData","setLocationData","fetch","then","response","json","data","catch","console","fetchIndexFundData","symbols","Object","values","map","fund","join","url","ok","Error","status","oldPriceData","oldPrice","updateMarkers","updatedLocations","location","indexFund","fundData","quoteResponse","find","quote","symbol","currentPrice","regularMarketPrice","isPriceIncreased","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","index","position","title","icon","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: '^GSPC'  // Replace with the Yahoo Finance symbol for S&P 500\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: '^STOXX50E'  // Replace with the Yahoo Finance symbol for Euro Stoxx 50\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: '^N225'  // Replace with the Yahoo Finance symbol for Nikkei 225\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: '^AXJO'  // Replace with the Yahoo Finance symbol for S&P/ASX 200\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: '^GSPTSE'  // Replace with the Yahoo Finance symbol for S&P/TSX Composite\n  }\n};\n\nconst locations = [\n  {\n    name: 'United States',\n    lat: 30.0902,\n    lng: -95.7129\n  },\n  {\n    name: 'Europe',\n    lat: 54.5260,\n    lng: 15.2551\n  },\n  {\n    name: 'Asia',\n    lat: 34.0479,\n    lng: 100.6197\n  },\n  {\n    name: 'Australia',\n    lat: -30.2744,\n    lng: 133.7751\n  },\n  {\n    name: 'Canada',\n    lat: 50.1304,\n    lng: -106.3468\n  }\n];\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [indexFundData, setIndexFundData] = useState({});\n  const [locationData, setLocationData] = useState(locations);\n\n  useEffect(() => {\n    fetch('/api/maps/config')\n      .then((response) => response.json())\n      .then((data) => setApiKey(data.apiKey))\n      .catch((error) => {\n        console.error('Error fetching Google Maps API key:', error);\n        setError('Error loading Google Maps!');\n      });\n\n    // Fetch index fund data using Yahoo Finance API\n    const fetchIndexFundData = async () => {\n      const symbols = Object.values(indexFunds).map((fund) => fund.ticker).join(',');\n      const url = `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${symbols}`;\n\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Fetch the old price from /api/stocklist or your existing endpoint\n        const oldPriceData = await fetch('/api/stocklist'); // Replace with your actual endpoint\n        if (!oldPriceData.ok) {\n          throw new Error(`Network response for old prices was not ok: ${oldPriceData.status}`);\n        }\n        const oldPrice = await oldPriceData.json();\n\n        // Update marker data based on index fund data and old price\n        updateMarkers(data, oldPrice);\n      } catch (error) {\n        console.error('Error fetching index fund data:', error);\n        setError('Error loading index fund data!');\n      }\n    };\n\n    fetchIndexFundData();\n  }, []);\n\n  const updateMarkers = (indexFundData, oldPrice) => {\n    if (indexFundData) {\n      const updatedLocations = locationData.map((location) => {\n        const indexFund = indexFunds[location.name];\n        if (indexFund) {\n          const fundData = indexFundData.quoteResponse.find((quote) => quote.symbol === indexFund.ticker);\n          if (fundData) {\n            const currentPrice = fundData.regularMarketPrice;\n            // Use the fetched old price\n            const isPriceIncreased = currentPrice > oldPrice[indexFund.ticker];\n\n            return {\n              ...location,\n              isPriceIncreased,\n            };\n          }\n        }\n        return location;\n      });\n\n      setLocationData(updatedLocations);\n    }\n  };\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            {locationData.map((location, index) => (\n              <Marker\n                key={index}\n                position={location}\n                title={location.name}\n                icon={{\n                  url: location.isPriceIncreased\n                    ? 'https://www.freeiconspng.com/uploads/green-spot-light-png-11.png'\n                    : 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png',\n                  scaledSize: { width: 100, height: 100 },\n                }}\n              />\n            ))}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}