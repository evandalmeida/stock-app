{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: '^GSPC' // Yahoo Finance symbol for S&P 500\n  },\n\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: '^STOXX50E' // Yahoo Finance symbol for Euro Stoxx 50\n  },\n\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: '^N225' // Yahoo Finance symbol for Nikkei 225\n  },\n\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: '^AXJO' // Yahoo Finance symbol for S&P/ASX 200\n  },\n\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: '^GSPTSE' // Yahoo Finance symbol for S&P/TSX Composite\n  }\n};\n\nconst locations = [{\n  name: 'United States',\n  lat: 30.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -30.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 50.1304,\n  lng: -106.3468\n}\n// Add more locations for other regions if needed\n];\n\nfunction MarketWatch() {\n  _s();\n  const [error, setError] = useState(null);\n  const [locationData, setLocationData] = useState(locations);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      try {\n        const today = new Date();\n        const formattedDate = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;\n        const response = await fetch(`/api/search-stock?query=YOUR_STOCK_SYMBOL&date=${formattedDate}`);\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        const stockData = await response.json();\n\n        // Calculate yesterday's date\n        const yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const formattedYesterday = `${yesterday.getFullYear()}-${(yesterday.getMonth() + 1).toString().padStart(2, '0')}-${yesterday.getDate().toString().padStart(2, '0')}`;\n\n        // Fetch yesterday's stock data\n        const yesterdayResponse = await fetch(`/api/search-stock?query=YOUR_STOCK_SYMBOL&date=${formattedYesterday}`);\n        if (!yesterdayResponse.ok) {\n          throw new Error(`Network response was not ok: ${yesterdayResponse.status}`);\n        }\n        const yesterdayStockData = await yesterdayResponse.json();\n\n        // Update marker data based on stock data\n        updateMarkers(stockData, yesterdayStockData);\n      } catch (error) {\n        console.error('Error fetching stock data:', error);\n        setError('Error loading stock data!');\n      }\n    };\n    fetchStockData();\n  }, []);\n  const updateMarkers = (todayStockData, yesterdayStockData) => {\n    if (todayStockData && yesterdayStockData) {\n      const updatedLocations = locationData.map(location => {\n        const indexFund = indexFunds[location.name];\n        if (indexFund && todayStockData.symbol === indexFund.ticker) {\n          const currentPrice = todayStockData.price;\n          const yesterdayPrice = yesterdayStockData.price;\n          const isPriceIncreased = currentPrice > yesterdayPrice;\n          return {\n            ...location,\n            isPriceIncreased\n          };\n        }\n        return location;\n      });\n      setLocationData(updatedLocations);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: locationData.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          title: location.name,\n          icon: {\n            url: location.isPriceIncreased ? 'https://www.freeiconspng.com/uploads/green-spot-light-png-11.png' : 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png',\n            scaledSize: {\n              width: 100,\n              height: 100\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"c2VRlI+6KlYNl0Hjd8YnJ7wcAe4=\");\n_c = MarketWatch;\nexport default MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","borderRadius","center","lat","lng","indexFunds","name","ticker","locations","MarketWatch","_s","error","setError","locationData","setLocationData","fetchStockData","today","Date","formattedDate","getFullYear","getMonth","toString","padStart","getDate","response","fetch","ok","Error","status","stockData","json","yesterday","setDate","formattedYesterday","yesterdayResponse","yesterdayStockData","updateMarkers","console","todayStockData","updatedLocations","map","location","indexFund","symbol","currentPrice","price","yesterdayPrice","isPriceIncreased","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","index","position","title","icon","url","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px',\n};\n\nconst center = {\n  lat: 32,\n  lng: 20,\n};\n\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: '^GSPC', // Yahoo Finance symbol for S&P 500\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: '^STOXX50E', // Yahoo Finance symbol for Euro Stoxx 50\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: '^N225', // Yahoo Finance symbol for Nikkei 225\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: '^AXJO', // Yahoo Finance symbol for S&P/ASX 200\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: '^GSPTSE', // Yahoo Finance symbol for S&P/TSX Composite\n  },\n};\n\nconst locations = [\n  {\n    name: 'United States',\n    lat: 30.0902,\n    lng: -95.7129,\n  },\n  {\n    name: 'Europe',\n    lat: 54.5260,\n    lng: 15.2551,\n  },\n  {\n    name: 'Asia',\n    lat: 34.0479,\n    lng: 100.6197,\n  },\n  {\n    name: 'Australia',\n    lat: -30.2744,\n    lng: 133.7751,\n  },\n  {\n    name: 'Canada',\n    lat: 50.1304,\n    lng: -106.3468,\n  },\n  // Add more locations for other regions if needed\n];\n\nfunction MarketWatch() {\n  const [error, setError] = useState(null);\n  const [locationData, setLocationData] = useState(locations);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      try {\n        const today = new Date();\n        const formattedDate = `${today.getFullYear()}-${(today.getMonth() + 1)\n          .toString()\n          .padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;\n\n        const response = await fetch(`/api/search-stock?query=YOUR_STOCK_SYMBOL&date=${formattedDate}`);\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        const stockData = await response.json();\n\n        // Calculate yesterday's date\n        const yesterday = new Date(today);\n        yesterday.setDate(yesterday.getDate() - 1);\n        const formattedYesterday = `${yesterday.getFullYear()}-${(yesterday.getMonth() + 1)\n          .toString()\n          .padStart(2, '0')}-${yesterday.getDate().toString().padStart(2, '0')}`;\n\n        // Fetch yesterday's stock data\n        const yesterdayResponse = await fetch(`/api/search-stock?query=YOUR_STOCK_SYMBOL&date=${formattedYesterday}`);\n        if (!yesterdayResponse.ok) {\n          throw new Error(`Network response was not ok: ${yesterdayResponse.status}`);\n        }\n        const yesterdayStockData = await yesterdayResponse.json();\n\n        // Update marker data based on stock data\n        updateMarkers(stockData, yesterdayStockData);\n      } catch (error) {\n        console.error('Error fetching stock data:', error);\n        setError('Error loading stock data!');\n      }\n    };\n\n    fetchStockData();\n  }, []);\n\n  const updateMarkers = (todayStockData, yesterdayStockData) => {\n    if (todayStockData && yesterdayStockData) {\n      const updatedLocations = locationData.map((location) => {\n        const indexFund = indexFunds[location.name];\n        if (indexFund && todayStockData.symbol === indexFund.ticker) {\n          const currentPrice = todayStockData.price;\n          const yesterdayPrice = yesterdayStockData.price;\n\n          const isPriceIncreased = currentPrice > yesterdayPrice;\n\n          return {\n            ...location,\n            isPriceIncreased,\n          };\n        }\n        return location;\n      });\n\n      setLocationData(updatedLocations);\n    }\n  };\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : (\n        <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\">\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            {locationData.map((location, index) => (\n              <Marker\n                key={index}\n                position={location}\n                title={location.name}\n                icon={{\n                  url: location.isPriceIncreased\n                    ? 'https://www.freeiconspng.com/uploads/green-spot-light-png-11.png'\n                    : 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png',\n                  scaledSize: { width: 100, height: 100 },\n                }}\n              />\n            ))}\n          </GoogleMap>\n        </LoadScript>\n      )}\n    </>\n  );\n}\n\nexport default MarketWatch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}