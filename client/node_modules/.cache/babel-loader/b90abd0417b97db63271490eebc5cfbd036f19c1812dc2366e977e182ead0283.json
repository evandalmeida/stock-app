{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nexport default function MarketWatch({\n  searchQuery\n}) {\n  _s();\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  useEffect(() => {\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error(\"Error fetching Google Maps API key:\", error);\n      setError('Error loading Google Maps!');\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch stock data and determine market status for the specified location\n    fetch(`/api/search-stock?query=${encodeURIComponent(searchQuery)}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.status}`);\n      }\n      return response.json();\n    }).then(stockData => {\n      // Determine market status based on your criteria (e.g., comparing stock price)\n      const isMarketUp = stockData && stockData.price > 0; // Example condition\n      setMarketStatus({\n        [searchQuery]: isMarketUp\n      });\n    }).catch(error => {\n      console.error(`Error fetching stock data for ${searchQuery}:`, error);\n    });\n  }, [searchQuery]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: /*#__PURE__*/_jsxDEV(Marker, {\n          position: center,\n          title: searchQuery,\n          icon: {\n            // Set the marker icon based on market status\n            url: marketStatus[searchQuery] ? '/public/green.png' // Green marker icon path\n            : '/public/red.jpeg',\n            // Red marker icon path\n            scaledSize: {\n              width: 32,\n              height: 32\n            } // Adjust width and height as needed\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"MmaBAe2PujbEzXIMzBgpnIEXGaQ=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","borderRadius","center","lat","lng","MarketWatch","searchQuery","_s","apiKey","setApiKey","error","setError","marketStatus","setMarketStatus","fetch","then","response","json","data","catch","console","encodeURIComponent","ok","Error","status","stockData","isMarketUp","price","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","position","title","icon","url","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\nexport default function MarketWatch({ searchQuery }) {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  useEffect(() => {\n    fetch('/api/maps/config')\n      .then(response => response.json())\n      .then(data => setApiKey(data.apiKey))\n      .catch(error => {\n        console.error(\"Error fetching Google Maps API key:\", error);\n        setError('Error loading Google Maps!');\n      });\n  }, []);\n\n  useEffect(() => {\n    // Fetch stock data and determine market status for the specified location\n    fetch(`/api/search-stock?query=${encodeURIComponent(searchQuery)}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(stockData => {\n        // Determine market status based on your criteria (e.g., comparing stock price)\n        const isMarketUp = stockData && stockData.price > 0; // Example condition\n        setMarketStatus({\n          [searchQuery]: isMarketUp\n        });\n      })\n      .catch(error => {\n        console.error(`Error fetching stock data for ${searchQuery}:`, error);\n      });\n  }, [searchQuery]);\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            <Marker\n              position={center}\n              title={searchQuery}\n              icon={{\n                // Set the marker icon based on market status\n                url: marketStatus[searchQuery]\n                  ? '/public/green.png' // Green marker icon path\n                  : '/public/red.jpeg', // Red marker icon path\n                scaledSize: { width: 32, height: 32 } // Adjust width and height as needed\n              }}\n            />\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}