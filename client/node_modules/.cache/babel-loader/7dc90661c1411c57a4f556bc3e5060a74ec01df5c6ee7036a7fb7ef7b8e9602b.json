{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\n// Define your index funds with their ticker symbols\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50'\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\nconst locations = [{\n  name: 'United States',\n  lat: 30.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -30.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 50.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [locationData, setLocationData] = useState(locations);\n  useEffect(() => {\n    // Fetch Google Maps API key\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error('Error fetching Google Maps API key:', error);\n      setError('Error loading Google Maps!');\n    });\n\n    // Fetch index fund data\n    fetchIndexFundData();\n  }, []);\n\n  // Function to fetch index fund data\n  const fetchIndexFundData = () => {\n    // Fetch index fund data from the backend\n    fetch('/api/index-fund-data').then(response => {\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      // Handle the fetched data as needed\n      // Update locationData or perform other operations based on data\n\n      // For example, you can update locationData as follows:\n      const updatedLocations = locations.map(location => {\n        const indexFund = indexFunds[location.name];\n        if (indexFund) {\n          const currentPrice = data[stock.price];\n          const oldPrice = data[`${stock.ticker}_old`];\n          const isPriceIncreased = currentPrice > oldPrice;\n          return {\n            ...location,\n            isPriceIncreased\n          };\n        }\n        return location;\n      });\n      setLocationData(updatedLocations);\n    }).catch(error => {\n      console.error('Error fetching index fund data:', error);\n      setError('Error loading index fund data!');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this) : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: locationData.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          title: location.name,\n          icon: {\n            url: location.isPriceIncreased ? 'https://www.freeiconspng.com/uploads/green-spot-light-png-11.png' : 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png',\n            scaledSize: {\n              width: 100,\n              height: 100\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"KAg3bu+lOKuS2t4xP6sA7nfEoQc=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","borderRadius","center","lat","lng","indexFunds","name","ticker","locations","MarketWatch","_s","apiKey","setApiKey","error","setError","locationData","setLocationData","fetch","then","response","json","data","catch","console","fetchIndexFundData","ok","Error","status","updatedLocations","map","location","indexFund","currentPrice","stock","price","oldPrice","isPriceIncreased","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","index","position","title","icon","url","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\n// Define your index funds with their ticker symbols\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50'\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\n\nconst locations = [\n  {\n    name: 'United States',\n    lat: 30.0902,\n    lng: -95.7129\n  },\n  {\n    name: 'Europe',\n    lat: 54.5260,\n    lng: 15.2551\n  },\n  {\n    name: 'Asia',\n    lat: 34.0479,\n    lng: 100.6197\n  },\n  {\n    name: 'Australia',\n    lat: -30.2744,\n    lng: 133.7751\n  },\n  {\n    name: 'Canada',\n    lat: 50.1304,\n    lng: -106.3468\n  }\n];\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [locationData, setLocationData] = useState(locations);\n\n  useEffect(() => {\n    // Fetch Google Maps API key\n    fetch('/api/maps/config')\n      .then((response) => response.json())\n      .then((data) => setApiKey(data.apiKey))\n      .catch((error) => {\n        console.error('Error fetching Google Maps API key:', error);\n        setError('Error loading Google Maps!');\n      });\n\n    // Fetch index fund data\n    fetchIndexFundData();\n  }, []);\n\n  // Function to fetch index fund data\n  const fetchIndexFundData = () => {\n    // Fetch index fund data from the backend\n    fetch('/api/index-fund-data')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Handle the fetched data as needed\n        // Update locationData or perform other operations based on data\n\n        // For example, you can update locationData as follows:\n        const updatedLocations = locations.map((location) => {\n          const indexFund = indexFunds[location.name];\n          if (indexFund) {\n            const currentPrice = data[stock.price];\n            const oldPrice = data[`${stock.ticker}_old`];\n            const isPriceIncreased = currentPrice > oldPrice;\n\n            return {\n              ...location,\n              isPriceIncreased,\n            };\n          }\n          return location;\n        });\n\n        setLocationData(updatedLocations);\n      })\n      .catch((error) => {\n        console.error('Error fetching index fund data:', error);\n        setError('Error loading index fund data!');\n      });\n  };\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            {locationData.map((location, index) => (\n              <Marker\n                key={index}\n                position={location}\n                title={location.name}\n                icon={{\n                  url: location.isPriceIncreased\n                    ? 'https://www.freeiconspng.com/uploads/green-spot-light-png-11.png'\n                    : 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png',\n                  scaledSize: { width: 100, height: 100 },\n                }}\n              />\n            ))}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}