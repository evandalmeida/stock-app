{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/StocksList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst marketIndexMapping = {\n  'S&P 500': 'United States',\n  'Euro Stoxx 50': 'Europe',\n  'Nikkei 225': 'Asia',\n  'S&P/ASX 200': 'Australia',\n  'S&P/TSX Composite': 'Canada'\n};\nconst locations = [{\n  name: 'United States',\n  lat: 37.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -25.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 56.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [marketData, setMarketData] = useState([]);\n  useEffect(() => {\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error(\"Error fetching Google Maps API key:\", error);\n      setError('Error loading Google Maps!');\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch and update market data for each location/index fund here\n    const fetchMarketData = async () => {\n      const updatedMarketData = [];\n      for (const location of locations) {\n        try {\n          const response = await fetch(`/api/fetch-market-data?country=${location.name}`);\n          const data = await response.json();\n          updatedMarketData.push({\n            ...location,\n            data\n          });\n        } catch (error) {\n          console.error(`Error fetching market data for ${location.name}:`, error);\n        }\n      }\n      setMarketData(updatedMarketData);\n    };\n    fetchMarketData();\n  }, []);\n\n  // Helper function to determine if the market is down\n  const isMarketDown = data => {\n    // Compare data.currentValue with data.yesterdayValue to decide\n    // whether the market is down or not\n    // You can define your criteria for this comparison.\n    return data.currentValue < data.yesterdayValue;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 2,\n        children: locations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location,\n          title: location.name,\n          icon: {\n            url: isMarketDown(marketData[index].data) ? 'https://png.pngtree.com/png-vector/20221024/ourmid/pngtree-red-pin-marker-png-image_6385786.png' : 'URL_TO_UP_ICON',\n            scaledSize: {\n              width: 32,\n              height: 32\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"JHGf5DSANbF2nsKxdYgl7ukKEC4=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","borderRadius","center","lat","lng","marketIndexMapping","locations","name","MarketWatch","_s","apiKey","setApiKey","error","setError","marketData","setMarketData","fetch","then","response","json","data","catch","console","fetchMarketData","updatedMarketData","location","push","isMarketDown","currentValue","yesterdayValue","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","map","index","position","title","icon","url","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/StocksList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '400px',\n  borderRadius: '5px'\n};\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\nconst marketIndexMapping = {\n  'S&P 500': 'United States',\n  'Euro Stoxx 50': 'Europe',\n  'Nikkei 225': 'Asia',\n  'S&P/ASX 200': 'Australia',\n  'S&P/TSX Composite': 'Canada'\n};\n\nconst locations = [\n  { name: 'United States', lat: 37.0902, lng: -95.7129 },\n  { name: 'Europe', lat: 54.5260, lng: 15.2551 },\n  { name: 'Asia', lat: 34.0479, lng: 100.6197 },\n  { name: 'Australia', lat: -25.2744, lng: 133.7751 },\n  { name: 'Canada', lat: 56.1304, lng: -106.3468 }\n];\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [marketData, setMarketData] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/maps/config')\n      .then(response => response.json())\n      .then(data => setApiKey(data.apiKey))\n      .catch(error => {\n        console.error(\"Error fetching Google Maps API key:\", error);\n        setError('Error loading Google Maps!');\n      });\n  }, []);\n\n  useEffect(() => {\n    // Fetch and update market data for each location/index fund here\n    const fetchMarketData = async () => {\n      const updatedMarketData = [];\n      for (const location of locations) {\n        try {\n          const response = await fetch(`/api/fetch-market-data?country=${location.name}`);\n          const data = await response.json();\n          updatedMarketData.push({ ...location, data });\n        } catch (error) {\n          console.error(`Error fetching market data for ${location.name}:`, error);\n        }\n      }\n      setMarketData(updatedMarketData);\n    };\n\n    fetchMarketData();\n  }, []);\n\n  // Helper function to determine if the market is down\n  const isMarketDown = (data) => {\n    // Compare data.currentValue with data.yesterdayValue to decide\n    // whether the market is down or not\n    // You can define your criteria for this comparison.\n    return data.currentValue < data.yesterdayValue;\n  };\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={2}>\n            {locations.map((location, index) => (\n              <Marker\n                key={index}\n                position={location}\n                title={location.name}\n                icon={{\n                  url: isMarketDown(marketData[index].data)\n                    ? 'https://png.pngtree.com/png-vector/20221024/ourmid/pngtree-red-pin-marker-png-image_6385786.png'\n                    : 'URL_TO_UP_ICON',\n                  scaledSize: { width: 32, height: 32 }\n                }}\n              />\n            ))}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}