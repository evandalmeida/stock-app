{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MarketWatch() {\n  _s();\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  const markets = [{\n    name: 'United States',\n    index: 'S&P 500'\n  }, {\n    name: 'Europe',\n    index: 'Euro Stoxx 50'\n  }, {\n    name: 'Asia',\n    index: 'Nikkei 225'\n  }, {\n    name: 'Australia',\n    index: 'S&P/ASX 200'\n  }, {\n    name: 'Canada',\n    index: 'S&P/TSX Composite'\n  }];\n  useEffect(() => {\n    const calculateMarketStatus = () => {\n      markets.forEach(market => {\n        fetch(`/api/search-stock?query=${market.index}`).then(response => {\n          if (!response.ok) {\n            throw new Error(`Network response was not ok: ${response.status}`);\n          }\n          return response.json();\n        }).then(indexData => {\n          // Assuming the backend returns index data with a \"performance\" field\n          const performance = indexData.performance;\n\n          // Determine if the market is up or down (you can define your criteria here)\n          const isMarketUp = performance > 0;\n\n          // Update the market status for the location\n          setMarketStatus(prevStatus => ({\n            ...prevStatus,\n            [market.name]: isMarketUp\n          }));\n        }).catch(error => {\n          console.error(`Error fetching index data for ${market.name}:`, error);\n        });\n      });\n    };\n\n    // Fetch initial data when the component mounts\n    calculateMarketStatus();\n\n    // Set up an interval to periodically recalculate market status\n    const interval = setInterval(() => {\n      calculateMarketStatus();\n    }, 60000); // Update every 1 minute (adjust as needed)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Market Watch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(marketStatus).map(([location, isUp]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [location, \": \", isUp ? 'Market Up' : 'Market Down']\n      }, location, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(MarketWatch, \"otSKLD9TN9yccTXSBZ5N2FB0mVI=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","MarketWatch","_s","marketStatus","setMarketStatus","markets","name","index","calculateMarketStatus","forEach","market","fetch","then","response","ok","Error","status","json","indexData","performance","isMarketUp","prevStatus","catch","error","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","location","isUp","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport default function MarketWatch() {\n  const [marketStatus, setMarketStatus] = useState({}); // Track market status for each location\n\n  const markets = [\n    { name: 'United States', index: 'S&P 500' },\n    { name: 'Europe', index: 'Euro Stoxx 50' },\n    { name: 'Asia', index: 'Nikkei 225' },\n    { name: 'Australia', index: 'S&P/ASX 200' },\n    { name: 'Canada', index: 'S&P/TSX Composite' },\n  ];\n\n  useEffect(() => {\n    const calculateMarketStatus = () => {\n      markets.forEach(market => {\n        fetch(`/api/search-stock?query=${market.index}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(`Network response was not ok: ${response.status}`);\n            }\n            return response.json();\n          })\n          .then(indexData => {\n            // Assuming the backend returns index data with a \"performance\" field\n            const performance = indexData.performance;\n\n            // Determine if the market is up or down (you can define your criteria here)\n            const isMarketUp = performance > 0;\n\n            // Update the market status for the location\n            setMarketStatus(prevStatus => ({\n              ...prevStatus,\n              [market.name]: isMarketUp,\n            }));\n          })\n          .catch(error => {\n            console.error(`Error fetching index data for ${market.name}:`, error);\n          });\n      });\n    };\n\n    // Fetch initial data when the component mounts\n    calculateMarketStatus();\n\n    // Set up an interval to periodically recalculate market status\n    const interval = setInterval(() => {\n      calculateMarketStatus();\n    }, 60000); // Update every 1 minute (adjust as needed)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <h1>Market Watch</h1>\n      <ul>\n        {Object.entries(marketStatus).map(([location, isUp]) => (\n          <li key={location}>\n            {location}: {isUp ? 'Market Up' : 'Market Down'}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}