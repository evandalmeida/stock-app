{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50'\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\nconst locations = [{\n  name: 'United States',\n  lat: 23.0902,\n  lng: -100.7129,\n  symbol: indexFunds['United States'].ticker\n}, {\n  name: 'Europe',\n  lat: 34.5260,\n  lng: 15.2551,\n  symbol: indexFunds['Europe'].ticker\n}, {\n  name: 'Asia',\n  lat: 25.0479,\n  lng: 100.6197,\n  symbol: indexFunds['Asia'].ticker\n}, {\n  name: 'Australia',\n  lat: -43.2744,\n  lng: 133.7751,\n  symbol: indexFunds['Australia'].ticker\n}, {\n  name: 'Canada',\n  lat: 47.1304,\n  lng: -106.3468,\n  symbol: indexFunds['Canada'].ticker\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error('Error fetching Google Maps API key:', error);\n      setError('Error loading Google Maps!');\n    });\n  }, []);\n  useEffect(() => {\n    // Fetch today's date\n    const today = new Date();\n    const formattedDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;\n\n    // Fetch stock price data for the last open business day\n    const fetchData = async () => {\n      const updatedStockData = await Promise.all(locations.map(async location => {\n        try {\n          const ticker = yf.Ticker(location.symbol);\n          const historicalData = await ticker.history({\n            period: '1d',\n            start: formattedDate // Use today's date as the start date\n          });\n\n          const yesterdayClose = historicalData.iloc[0].Close;\n          const todayClose = historicalData.iloc[1].Close;\n          const priceChange = todayClose - yesterdayClose;\n          return {\n            ...location,\n            priceChange\n          };\n        } catch (error) {\n          console.error('Error fetching stock data:', error);\n          return location;\n        }\n      }));\n      setStockData(updatedStockData);\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 1.7,\n        className: \"map\",\n        children: stockData.map((location, index) => {\n          // Determine pin color based on price change\n          const isRedPin = location.priceChange < 0;\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: location.lat,\n              lng: location.lng\n            },\n            title: location.name,\n            icon: {\n              url: isRedPin ? 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png' : 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725',\n              scaledSize: {\n                width: 100,\n                height: 95\n              }\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"dEqc3ftcsW6kv2Ku4EZ+K5aBFLo=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","center","lat","lng","indexFunds","name","ticker","locations","symbol","MarketWatch","_s","apiKey","setApiKey","error","setError","stockData","setStockData","fetch","then","response","json","data","catch","console","today","Date","formattedDate","getFullYear","String","getMonth","padStart","getDate","fetchData","updatedStockData","Promise","all","map","location","yf","Ticker","historicalData","history","period","start","yesterdayClose","iloc","Close","todayClose","priceChange","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","containerStyle","zoom","className","index","isRedPin","position","title","icon","url","scaledSize","width","height","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50'\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\n\nconst locations = [\n  {\n    name: 'United States',\n    lat: 23.0902,\n    lng: -100.7129,\n    symbol: indexFunds['United States'].ticker\n  },\n  {\n    name: 'Europe',\n    lat: 34.5260,\n    lng: 15.2551,\n    symbol: indexFunds['Europe'].ticker\n  },\n  {\n    name: 'Asia',\n    lat: 25.0479,\n    lng: 100.6197,\n    symbol: indexFunds['Asia'].ticker\n  },\n  {\n    name: 'Australia',\n    lat: -43.2744,\n    lng: 133.7751,\n    symbol: indexFunds['Australia'].ticker\n  },\n  {\n    name: 'Canada',\n    lat: 47.1304,\n    lng: -106.3468,\n    symbol: indexFunds['Canada'].ticker\n  }\n];\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState('');\n  const [error, setError] = useState(null);\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/maps/config')\n      .then((response) => response.json())\n      .then((data) => setApiKey(data.apiKey))\n      .catch((error) => {\n        console.error('Error fetching Google Maps API key:', error);\n        setError('Error loading Google Maps!');\n      });\n  }, []);\n\n  useEffect(() => {\n    // Fetch today's date\n    const today = new Date();\n    const formattedDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(\n      today.getDate()\n    ).padStart(2, '0')}`;\n\n    // Fetch stock price data for the last open business day\n    const fetchData = async () => {\n      const updatedStockData = await Promise.all(\n        locations.map(async (location) => {\n          try {\n            const ticker = yf.Ticker(location.symbol);\n            const historicalData = await ticker.history({\n              period: '1d',\n              start: formattedDate, // Use today's date as the start date\n            });\n\n            const yesterdayClose = historicalData.iloc[0].Close;\n            const todayClose = historicalData.iloc[1].Close;\n            const priceChange = todayClose - yesterdayClose;\n\n            return {\n              ...location,\n              priceChange,\n            };\n          } catch (error) {\n            console.error('Error fetching stock data:', error);\n            return location;\n          }\n        })\n      );\n\n      setStockData(updatedStockData);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={1.7} className=\"map\">\n            {stockData.map((location, index) => {\n              // Determine pin color based on price change\n              const isRedPin = location.priceChange < 0;\n\n              return (\n                <Marker\n                  key={index}\n                  position={{ lat: location.lat, lng: location.lng }}\n                  title={location.name}\n                  icon={{\n                    url: isRedPin\n                      ? 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png'\n                      : 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725',\n                    scaledSize: { width: 100, height: 95 },\n                  }}\n                />\n              );\n            })}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}