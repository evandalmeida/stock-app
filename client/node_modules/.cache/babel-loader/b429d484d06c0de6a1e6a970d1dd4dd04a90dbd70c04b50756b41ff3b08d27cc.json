{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '800px',\n  height: '900px',\n  borderRadius: '3vh'\n};\nconst center = {\n  lat: 32,\n  lng: 20\n};\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50'\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\nconst locations = [{\n  name: 'United States',\n  lat: 23.0902,\n  lng: -100.7129\n}, {\n  name: 'Europe',\n  lat: 34.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 25.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -43.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 47.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch('/api/maps/config').then(response => response.json()).then(data => setApiKey(data.apiKey)).catch(error => {\n      console.error(\"Error fetching Google Maps API key:\", error);\n      setError('Error loading Google Maps!');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : apiKey ? /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 1.7,\n        children: locations.map((location, index) => {\n          // Example condition: Generate a random boolean to determine pin color\n          const isRedPin = Math.random() < 0.5;\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: location,\n            title: location.name,\n            icon: {\n              url: isRedPin ? 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png' : 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725',\n              scaledSize: {\n                width: 100,\n                height: 95\n              }\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(MarketWatch, \"zilDpR7OpPVTTkYdHPzjDoLE9gU=\");\n_c = MarketWatch;\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Fragment","_Fragment","containerStyle","width","height","borderRadius","center","lat","lng","indexFunds","name","ticker","locations","MarketWatch","_s","apiKey","setApiKey","error","setError","fetch","then","response","json","data","catch","console","children","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","map","location","index","isRedPin","Math","random","position","title","icon","url","scaledSize","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst containerStyle = {\n  width: '800px',\n  height: '900px',\n  borderRadius: '3vh'\n};\n\nconst center = {\n  lat: 32,\n  lng: 20\n};\n\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY' \n  },\n  'Europe': {\n   name: 'Euro Stoxx 50',\n   ticker: 'STOXX50'\n  },\n  'Asia': {\n   name: 'Nikkei 225',  \n   ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\n\nconst locations = [\n  { name: 'United States', \n    lat: 23.0902, \n    lng: -100.7129 \n  },\n  { name: 'Europe',\n    lat: 34.5260,\n    lng: 15.2551\n  },\n  { name: 'Asia',\n    lat: 25.0479, \n    lng: 100.6197\n  },\n  { name: 'Australia',\n    lat: -43.2744,\n    lng: 133.7751 \n  },\n  { name: 'Canada', \n    lat: 47.1304, \n    lng: -106.3468\n  }\n];\n\n\nexport default function MarketWatch() {\n  const [apiKey, setApiKey] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/maps/config')\n      .then(response => response.json())\n      .then(data => setApiKey(data.apiKey))\n      .catch(error => {\n        console.error(\"Error fetching Google Maps API key:\", error);\n        setError('Error loading Google Maps!');\n      });\n  }, []);\n\n  return (\n    <>\n      {error ? (\n        <p>{error}</p>\n      ) : apiKey ? (\n        <LoadScript googleMapsApiKey={apiKey}>\n          <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={1.7}>\n            {locations.map((location, index) => {\n              // Example condition: Generate a random boolean to determine pin color\n              const isRedPin = Math.random() < 0.5;\n\n              return (\n                <Marker\n                key={index}\n                position={location}\n                title={location.name}\n                icon={{\n                  url: isRedPin\n                    ? 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png'\n                    : 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725',\n                  scaledSize: { width: 100, height: 95 }\n                }}\n              />\n              \n              );\n            })}\n          </GoogleMap>\n        </LoadScript>\n      ) : (\n        <p>Loading map...</p>\n      )}\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}