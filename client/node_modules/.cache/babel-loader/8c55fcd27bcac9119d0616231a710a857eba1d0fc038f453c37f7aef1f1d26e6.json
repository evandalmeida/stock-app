{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst indexFunds = {\n  'United States': {\n    name: 'S&P 500',\n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50'\n  },\n  'Asia': {\n    name: 'Nikkei 225',\n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite',\n    ticker: 'TSX'\n  }\n};\nconst locations = [{\n  name: 'United States',\n  lat: 37.0902,\n  lng: -95.7129\n}, {\n  name: 'Europe',\n  lat: 54.5260,\n  lng: 15.2551\n}, {\n  name: 'Asia',\n  lat: 34.0479,\n  lng: 100.6197\n}, {\n  name: 'Australia',\n  lat: -25.2744,\n  lng: 133.7751\n}, {\n  name: 'Canada',\n  lat: 56.1304,\n  lng: -106.3468\n}];\nexport default function MarketWatch() {\n  _s();\n  const [stockPrices, setStockPrices] = useState([]);\n  useEffect(() => {\n    const fetchPrices = async () => {\n      const prices = [];\n      for (let loc of locations) {\n        const fund = indexFunds[loc.name];\n        try {\n          const res = await fetch(`/api/price?ticker=${fund.ticker}`);\n          const data = await res.json();\n          prices.push({\n            location: loc,\n            fund: fund,\n            price: data.price,\n            change: data.change\n          });\n        } catch (err) {\n          console.error(err);\n          prices.push({\n            location: loc,\n            fund: fund,\n            price: null,\n            change: null\n          });\n        }\n      }\n      setStockPrices(prices);\n    };\n    fetchPrices();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GoogleMap, {\n    children: stockPrices.map(sp => /*#__PURE__*/_jsxDEV(Marker, {\n      position: sp.location,\n      icon: getIcon(sp.change)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(MarketWatch, \"OaECAx1ZXnp6W/GvBOTbHyB8t1k=\");\n_c = MarketWatch;\nfunction getIcon(change) {\n  if (change < 0) {\n    return 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png';\n  } else if (change > 0) {\n    return 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725';\n  } else {\n    return 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725';\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"MarketWatch\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","indexFunds","name","ticker","locations","lat","lng","MarketWatch","_s","stockPrices","setStockPrices","fetchPrices","prices","loc","fund","res","fetch","data","json","push","location","price","change","err","console","error","children","map","sp","position","icon","getIcon","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/evan/Development/code/phase-4/stock-app/client/src/components/UserPanel/MarketWatch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nconst indexFunds = {\n  'United States': { \n    name: 'S&P 500', \n    ticker: 'SPY'\n  },\n  'Europe': {\n    name: 'Euro Stoxx 50',\n    ticker: 'STOXX50' \n  },\n  'Asia': {\n    name: 'Nikkei 225', \n    ticker: 'NIKKEI225'\n  },\n  'Australia': {\n    name: 'S&P/ASX 200',\n    ticker: 'ASX200'\n  },\n  'Canada': {\n    name: 'S&P/TSX Composite', \n    ticker: 'TSX'\n  }\n};\n\nconst locations = [\n  {\n    name: 'United States',\n    lat: 37.0902,\n    lng: -95.7129\n  },\n  {\n    name: 'Europe',\n    lat: 54.5260,\n    lng: 15.2551\n  },\n  {\n    name: 'Asia', \n    lat: 34.0479,\n    lng: 100.6197\n  },\n  {\n    name: 'Australia',\n    lat: -25.2744,\n    lng: 133.7751\n  },\n  {\n    name: 'Canada',\n    lat: 56.1304,\n    lng: -106.3468\n  }\n];\n\nexport default function MarketWatch() {\n\n  const [stockPrices, setStockPrices] = useState([]);\n\n  useEffect(() => {\n    const fetchPrices = async () => {\n      const prices = [];\n\n      for(let loc of locations) {\n        const fund = indexFunds[loc.name];\n        \n        try {\n          const res = await fetch(`/api/price?ticker=${fund.ticker}`);\n          const data = await res.json();\n\n          prices.push({\n            location: loc,\n            fund: fund,\n            price: data.price,\n            change: data.change  \n          });\n\n        } catch (err) {\n          console.error(err);\n          prices.push({\n            location: loc,\n            fund: fund,\n            price: null,\n            change: null\n          });\n        }\n      }\n\n      setStockPrices(prices);\n    }\n\n    fetchPrices();\n  }, []);\n\n  return (\n    <GoogleMap>\n      {stockPrices.map(sp => (\n        <Marker\n          position={sp.location}\n          icon={getIcon(sp.change)}\n        />\n      ))}\n    </GoogleMap>\n  );\n\n}\n\nfunction getIcon(change) {\n\n  if (change < 0) {\n\n    return 'https://www.freeiconspng.com/uploads/red-spot-light-png-6.png';\n\n  } else if (change > 0) {\n\n    return 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725';\n\n  } else {\n\n    return 'https://freepngimg.com/save/34148-green-light-transparent-image/980x725';\n\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}